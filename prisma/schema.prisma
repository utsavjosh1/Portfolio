generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Project {
  id          String   @id @default(cuid())
  title       String   @db.VarChar(200)
  description String   @db.Text
  content     String?  @db.Text // Detailed markdown content
  image       String?  @db.VarChar(500)
  video       String?  @db.VarChar(500) // Video URL for demo/setup
  gallery     String[] // Array of image URLs
  tags        String[]
  status      ProjectStatus @default(COMPLETED)
  featured    Boolean  @default(false)
  private     Boolean  @default(false) // Whether project is private/public
  year        String?  @db.VarChar(4)
  github      String?  @db.VarChar(500)
  demo        String?  @db.VarChar(500)
  slug        String   @unique @db.VarChar(100)
  published   Boolean  @default(true)
  priority    Int      @default(0) // For ordering projects
  viewCount   Int      @default(0) // Track project views
  difficulty  ProjectDifficulty @default(MEDIUM)
  duration    String?  @db.VarChar(50) // e.g., "2 weeks", "1 month"
  teamSize    Int?     // Number of team members
  clientName  String?  @db.VarChar(100) // For client projects
  
  // SEO fields
  metaTitle       String? @db.VarChar(60)
  metaDescription String? @db.VarChar(160)
  
  // Timestamps
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  publishedAt DateTime? // When it was actually published

  // Relations
  technologies ProjectTechnology[]
  
  // Performance indexes
  @@index([published, featured])
  @@index([published, status])
  @@index([published, createdAt])
  @@index([slug])
  @@index([private, published])
  @@index([priority])
  @@map("projects")
}

model Technology {
  id          String   @id @default(cuid())
  name        String   @unique @db.VarChar(100)
  description String?  @db.Text
  image       String?  @db.VarChar(500) // Technology logo/image
  icon        String?  @db.VarChar(100) // Icon class or SVG
  category    String?  @db.VarChar(50)
  color       String?  @db.VarChar(200) // Hex color for UI
  website     String?  @db.VarChar(500) // Official website
  order       Int      @default(0) // For ordering in lists
  active      Boolean  @default(true) // Hide deprecated technologies
  
  // Timestamps
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  projects    ProjectTechnology[]
  skills      Skill[]
  
  @@index([category, order])
  @@index([active])
  @@map("technologies")
}

model ProjectTechnology {
  id           String @id @default(cuid())
  projectId    String
  technologyId String
  isPrimary    Boolean @default(false) // Mark primary technologies
  
  project      Project    @relation(fields: [projectId], references: [id], onDelete: Cascade)
  technology   Technology @relation(fields: [technologyId], references: [id], onDelete: Cascade)
  
  @@unique([projectId, technologyId])
  @@index([projectId])
  @@index([technologyId])
  @@index([isPrimary])
  @@map("project_technologies")
}

model BlogPost {
  id          String   @id @default(cuid())
  title       String   @db.VarChar(200)
  excerpt     String   @db.VarChar(500)
  content     String   @db.Text // Markdown content
  slug        String   @unique @db.VarChar(100)
  featured    Boolean  @default(false)
  published   Boolean  @default(false)
  tags        String[]
  category    String?  @db.VarChar(50)
  readingTime String?  @db.VarChar(20)
  image       String?  @db.VarChar(500)
  viewCount   Int      @default(0)
  likeCount   Int      @default(0)
  
  // SEO fields
  metaTitle       String? @db.VarChar(60)
  metaDescription String? @db.VarChar(160)
  
  // Author info (for multi-author blogs)
  authorName  String?  @db.VarChar(100)
  authorEmail String?  @db.VarChar(100)
  
  // Timestamps
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  publishedAt DateTime?

  // Relations
  comments    BlogComment[]
  
  // Performance indexes
  @@index([published, featured])
  @@index([published, publishedAt])
  @@index([published, category])
  @@index([slug])
  @@index([viewCount])
  @@map("blog_posts")
}

model BlogComment {
  id        String   @id @default(cuid())
  postId    String
  name      String   @db.VarChar(100)
  email     String   @db.VarChar(100)
  website   String?  @db.VarChar(500)
  content   String   @db.Text
  approved  Boolean  @default(false)
  parentId  String?  // For nested comments
  
  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relations
  post      BlogPost @relation(fields: [postId], references: [id], onDelete: Cascade)
  parent    BlogComment? @relation("CommentReplies", fields: [parentId], references: [id])
  replies   BlogComment[] @relation("CommentReplies")
  
  @@index([postId, approved])
  @@index([parentId])
  @@map("blog_comments")
}

model Experience {
  id          String   @id @default(cuid())
  company     String   @db.VarChar(100)
  position    String   @db.VarChar(100)
  description String?  @db.Text
  startDate   DateTime
  endDate     DateTime?
  current     Boolean  @default(false)
  location    String?  @db.VarChar(100)
  website     String?  @db.VarChar(500)
  logo        String?  @db.VarChar(500)
  order       Int      @default(0)
  employmentType ExperienceType @default(FULL_TIME)
  
  // Additional fields
  achievements String[] // Key achievements
  skills       String[] // Skills used in this role
  
  // Timestamps
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Validation: endDate should be after startDate if not current
  @@index([order, startDate])
  @@index([current])
  @@map("experiences")
}

model Skill {
  id           String   @id @default(cuid())
  name         String   @db.VarChar(100)
  level        SkillLevel @default(INTERMEDIATE)
  category     String?  @db.VarChar(50)
  description  String?  @db.Text
  yearsOfExp   Int?     @db.SmallInt
  order        Int      @default(0)
  endorsed     Boolean  @default(false) // Professionally endorsed
  
  // Timestamps
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relations  
  technologyId String?
  technology   Technology? @relation(fields: [technologyId], references: [id])
  
  @@index([category, order])
  @@index([level])
  @@map("skills")
}

model ContactSubmission {
  id        String   @id @default(cuid())
  name      String   @db.VarChar(100)
  email     String   @db.VarChar(100)
  subject   String?  @db.VarChar(200)
  message   String   @db.Text
  status    ContactStatus @default(UNREAD)
  ipAddress String?  @db.Inet // For spam prevention
  userAgent String?  @db.VarChar(500)
  
  // Honeypot and spam detection
  honeypot  String?  @db.VarChar(100) // Should be empty
  spamScore Float?   @default(0.0) // Spam detection score
  
  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  repliedAt DateTime? // When reply was sent
  
  @@index([status, createdAt])
  @@index([email])
  @@index([spamScore])
  @@map("contact_submissions")
}

model NewsletterSubscription {
  id          String   @id @default(cuid())
  email       String   @unique @db.VarChar(100)
  active      Boolean  @default(true)
  source      String?  @db.VarChar(100) // Where they subscribed from
  ipAddress   String?  @db.Inet
  confirmed   Boolean  @default(false) // Email confirmation
  
  // Preferences
  frequency   NewsletterFrequency @default(WEEKLY)
  categories  String[] // What topics they're interested in
  
  // Timestamps
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  confirmedAt DateTime? // When email was confirmed
  
  @@index([active, createdAt])
  @@index([confirmed, active])
  @@map("newsletter_subscriptions")
}

model PageView {
  id        String   @id @default(cuid())
  path      String   @db.VarChar(500)
  userAgent String?  @db.VarChar(500)
  ipAddress String?  @db.Inet
  referer   String?  @db.VarChar(500)
  country   String?  @db.VarChar(2) // ISO country code
  city      String?  @db.VarChar(100)
  
  // Timestamps
  createdAt DateTime @default(now())
  
  @@index([path, createdAt])
  @@index([createdAt])
  @@map("page_views")
}

// User sessions for admin panel
model AdminSession {
  id        String   @id @default(cuid())
  userId    String   @db.VarChar(100)
  token     String   @unique @db.VarChar(500)
  expiresAt DateTime
  ipAddress String?  @db.Inet
  userAgent String?  @db.VarChar(500)
  
  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@index([userId])
  @@index([expiresAt])
  @@map("admin_sessions")
}

// Enums
enum ProjectStatus {
  PLANNING
  IN_PROGRESS
  COMPLETED
  ARCHIVED
  ON_HOLD
}

enum ProjectDifficulty {
  EASY
  MEDIUM
  HARD
  EXPERT
}

enum SkillLevel {
  BEGINNER
  INTERMEDIATE
  ADVANCED
  EXPERT
}

enum ContactStatus {
  UNREAD
  READ
  REPLIED
  ARCHIVED
  SPAM
}

enum ExperienceType {
  FULL_TIME
  PART_TIME
  CONTRACT
  FREELANCE
  INTERNSHIP
  VOLUNTEER
}

enum NewsletterFrequency {
  DAILY
  WEEKLY
  MONTHLY
  QUARTERLY
}